version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres_master
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      -  postgres_master_data:/var/lib/postgresql/data
      -  ./db_config/postgresql.conf:/etc/postgresql/postgresql.conf
      -  ./db_config/pg_hba.conf:/etc/postgresql/pg_hba.conf
      -  ./db_config/init-scripts:/docker-entrypoint-initdb.d
      -  ./backups:/backups
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - net-api
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    env_file:
      - .env

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - net-api

  pg_backup:
    image: alpine
    container_name: pg_backup
    depends_on:
      - postgres
    volumes:
      - pg_backup_data:/backups
      - ./pg_backup_config/scripts:/scripts
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres_master
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "apk add --no-cache postgresql-client &&
       while true; do /scripts/backup.sh; sleep 86400; done"
    networks:
      - net-api

  django_admin:
    container_name: admin_panel
    build:
      context: .
    depends_on:
      - crud
    ports:
      - "${DJANGO_ADMIN_PORT}:8000"
    command: python manage.py runserver 0.0.0.0:8000 --insecure
    env_file:
      - .env
    networks:
      - net-api

  crud:
    container_name: django_crud
    build:
      context: .
    depends_on:
      - postgres
    ports:
      - "${DB_CRUD_PORT}:${DB_CRUD_PORT}"
    command: ["/app/entrypoint.sh"]
    env_file:
      - .env
    networks:
      - net-api

volumes:
  postgres_master_data:
    driver: local
  pgadmin_data:
    driver: local
  pg_backup_data:

networks:
  net-api:
    driver: bridge